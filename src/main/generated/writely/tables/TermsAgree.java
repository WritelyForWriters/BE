/*
 * This file is generated by jOOQ.
 */
package writely.tables;


import java.time.OffsetDateTime;
import java.util.Collection;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import writely.Keys;
import writely.Public;
import writely.tables.records.TermsAgreeRecord;


/**
 * 약관_동의
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class TermsAgree extends TableImpl<TermsAgreeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.terms_agree</code>
     */
    public static final TermsAgree TERMS_AGREE = new TermsAgree();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TermsAgreeRecord> getRecordType() {
        return TermsAgreeRecord.class;
    }

    /**
     * The column <code>public.terms_agree.terms_id</code>. 약관 ID
     */
    public final TableField<TermsAgreeRecord, UUID> TERMS_ID = createField(DSL.name("terms_id"), SQLDataType.UUID.nullable(false), this, "약관 ID");

    /**
     * The column <code>public.terms_agree.member_id</code>. 회원 ID
     */
    public final TableField<TermsAgreeRecord, UUID> MEMBER_ID = createField(DSL.name("member_id"), SQLDataType.UUID.nullable(false), this, "회원 ID");

    /**
     * The column <code>public.terms_agree.created_at</code>.
     */
    public final TableField<TermsAgreeRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    /**
     * The column <code>public.terms_agree.updated_at</code>.
     */
    public final TableField<TermsAgreeRecord, OffsetDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    private TermsAgree(Name alias, Table<TermsAgreeRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private TermsAgree(Name alias, Table<TermsAgreeRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("약관_동의"), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.terms_agree</code> table reference
     */
    public TermsAgree(String alias) {
        this(DSL.name(alias), TERMS_AGREE);
    }

    /**
     * Create an aliased <code>public.terms_agree</code> table reference
     */
    public TermsAgree(Name alias) {
        this(alias, TERMS_AGREE);
    }

    /**
     * Create a <code>public.terms_agree</code> table reference
     */
    public TermsAgree() {
        this(DSL.name("terms_agree"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<TermsAgreeRecord> getPrimaryKey() {
        return Keys.TERMS_AGREE_PK;
    }

    @Override
    public TermsAgree as(String alias) {
        return new TermsAgree(DSL.name(alias), this);
    }

    @Override
    public TermsAgree as(Name alias) {
        return new TermsAgree(alias, this);
    }

    @Override
    public TermsAgree as(Table<?> alias) {
        return new TermsAgree(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TermsAgree rename(String name) {
        return new TermsAgree(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TermsAgree rename(Name name) {
        return new TermsAgree(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TermsAgree rename(Table<?> name) {
        return new TermsAgree(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TermsAgree where(Condition condition) {
        return new TermsAgree(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TermsAgree where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TermsAgree where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TermsAgree where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TermsAgree where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TermsAgree where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TermsAgree where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TermsAgree where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TermsAgree whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TermsAgree whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
