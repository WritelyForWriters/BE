/*
 * This file is generated by jOOQ.
 */
package writely.tables;


import java.time.LocalDateTime;
import java.util.Collection;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import writely.Keys;
import writely.Public;
import writely.tables.records.ProductCustomFieldRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ProductCustomField extends TableImpl<ProductCustomFieldRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.product_custom_field</code>
     */
    public static final ProductCustomField PRODUCT_CUSTOM_FIELD = new ProductCustomField();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProductCustomFieldRecord> getRecordType() {
        return ProductCustomFieldRecord.class;
    }

    /**
     * The column <code>public.product_custom_field.id</code>. 커스텀 필드 ID
     */
    public final TableField<ProductCustomFieldRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("gen_random_uuid()"), SQLDataType.UUID)), this, "커스텀 필드 ID");

    /**
     * The column <code>public.product_custom_field.product_id</code>. 작품 ID
     */
    public final TableField<ProductCustomFieldRecord, UUID> PRODUCT_ID = createField(DSL.name("product_id"), SQLDataType.UUID.nullable(false), this, "작품 ID");

    /**
     * The column <code>public.product_custom_field.section_id</code>. 섹션 ID
     */
    public final TableField<ProductCustomFieldRecord, UUID> SECTION_ID = createField(DSL.name("section_id"), SQLDataType.UUID.nullable(false), this, "섹션 ID");

    /**
     * The column <code>public.product_custom_field.section_type</code>. 섹션 타입
     */
    public final TableField<ProductCustomFieldRecord, String> SECTION_TYPE = createField(DSL.name("section_type"), SQLDataType.VARCHAR(20).nullable(false), this, "섹션 타입");

    /**
     * The column <code>public.product_custom_field.name</code>. 이름
     */
    public final TableField<ProductCustomFieldRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(30).nullable(false), this, "이름");

    /**
     * The column <code>public.product_custom_field.content</code>. 내용
     */
    public final TableField<ProductCustomFieldRecord, String> CONTENT = createField(DSL.name("content"), SQLDataType.CLOB.nullable(false), this, "내용");

    /**
     * The column <code>public.product_custom_field.seq</code>. 순서
     */
    public final TableField<ProductCustomFieldRecord, Short> SEQ = createField(DSL.name("seq"), SQLDataType.SMALLINT.nullable(false), this, "순서");

    /**
     * The column <code>public.product_custom_field.created_at</code>. 생성일시
     */
    public final TableField<ProductCustomFieldRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "생성일시");

    /**
     * The column <code>public.product_custom_field.created_by</code>. 생성자 ID
     */
    public final TableField<ProductCustomFieldRecord, UUID> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.UUID.nullable(false), this, "생성자 ID");

    /**
     * The column <code>public.product_custom_field.updated_at</code>. 수정일시
     */
    public final TableField<ProductCustomFieldRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "수정일시");

    /**
     * The column <code>public.product_custom_field.updated_by</code>. 수정자 ID
     */
    public final TableField<ProductCustomFieldRecord, UUID> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.UUID.nullable(false), this, "수정자 ID");

    private ProductCustomField(Name alias, Table<ProductCustomFieldRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ProductCustomField(Name alias, Table<ProductCustomFieldRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.product_custom_field</code> table
     * reference
     */
    public ProductCustomField(String alias) {
        this(DSL.name(alias), PRODUCT_CUSTOM_FIELD);
    }

    /**
     * Create an aliased <code>public.product_custom_field</code> table
     * reference
     */
    public ProductCustomField(Name alias) {
        this(alias, PRODUCT_CUSTOM_FIELD);
    }

    /**
     * Create a <code>public.product_custom_field</code> table reference
     */
    public ProductCustomField() {
        this(DSL.name("product_custom_field"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<ProductCustomFieldRecord> getPrimaryKey() {
        return Keys.PRODUCT_CUSTOM_FIELD_PK;
    }

    @Override
    public ProductCustomField as(String alias) {
        return new ProductCustomField(DSL.name(alias), this);
    }

    @Override
    public ProductCustomField as(Name alias) {
        return new ProductCustomField(alias, this);
    }

    @Override
    public ProductCustomField as(Table<?> alias) {
        return new ProductCustomField(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductCustomField rename(String name) {
        return new ProductCustomField(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductCustomField rename(Name name) {
        return new ProductCustomField(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductCustomField rename(Table<?> name) {
        return new ProductCustomField(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProductCustomField where(Condition condition) {
        return new ProductCustomField(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProductCustomField where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProductCustomField where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProductCustomField where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProductCustomField where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProductCustomField where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProductCustomField where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProductCustomField where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProductCustomField whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProductCustomField whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
