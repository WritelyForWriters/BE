/*
 * This file is generated by jOOQ.
 */
package writely.tables;


import java.time.OffsetDateTime;
import java.util.Collection;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import writely.Keys;
import writely.Public;
import writely.tables.records.TermsRecord;


/**
 * 약관
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Terms extends TableImpl<TermsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.terms</code>
     */
    public static final Terms TERMS = new Terms();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TermsRecord> getRecordType() {
        return TermsRecord.class;
    }

    /**
     * The column <code>public.terms.id</code>. 약관 ID
     */
    public final TableField<TermsRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "약관 ID");

    /**
     * The column <code>public.terms.cd</code>. 약관 코드
     */
    public final TableField<TermsRecord, String> CD = createField(DSL.name("cd"), SQLDataType.VARCHAR(10).nullable(false), this, "약관 코드");

    /**
     * The column <code>public.terms.version</code>. 약관 버전
     */
    public final TableField<TermsRecord, Integer> VERSION = createField(DSL.name("version"), SQLDataType.INTEGER.nullable(false), this, "약관 버전");

    /**
     * The column <code>public.terms.title</code>. 약관 제목
     */
    public final TableField<TermsRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(50).nullable(false), this, "약관 제목");

    /**
     * The column <code>public.terms.content</code>. 약관 내용
     */
    public final TableField<TermsRecord, String> CONTENT = createField(DSL.name("content"), SQLDataType.CLOB.nullable(false), this, "약관 내용");

    /**
     * The column <code>public.terms.created_at</code>.
     */
    public final TableField<TermsRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    /**
     * The column <code>public.terms.updated_at</code>.
     */
    public final TableField<TermsRecord, OffsetDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    private Terms(Name alias, Table<TermsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Terms(Name alias, Table<TermsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("약관"), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.terms</code> table reference
     */
    public Terms(String alias) {
        this(DSL.name(alias), TERMS);
    }

    /**
     * Create an aliased <code>public.terms</code> table reference
     */
    public Terms(Name alias) {
        this(alias, TERMS);
    }

    /**
     * Create a <code>public.terms</code> table reference
     */
    public Terms() {
        this(DSL.name("terms"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<TermsRecord> getPrimaryKey() {
        return Keys.TERMS_PK;
    }

    @Override
    public Terms as(String alias) {
        return new Terms(DSL.name(alias), this);
    }

    @Override
    public Terms as(Name alias) {
        return new Terms(alias, this);
    }

    @Override
    public Terms as(Table<?> alias) {
        return new Terms(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Terms rename(String name) {
        return new Terms(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Terms rename(Name name) {
        return new Terms(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Terms rename(Table<?> name) {
        return new Terms(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Terms where(Condition condition) {
        return new Terms(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Terms where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Terms where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Terms where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Terms where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Terms where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Terms where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Terms where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Terms whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Terms whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
