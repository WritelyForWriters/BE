/*
 * This file is generated by jOOQ.
 */
package writeon.tables;


import java.time.LocalDateTime;
import java.util.Collection;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import writeon.Keys;
import writeon.Public;
import writeon.tables.records.ProductWorldviewRecord;


/**
 * 작품 세계관
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ProductWorldview extends TableImpl<ProductWorldviewRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.product_worldview</code>
     */
    public static final ProductWorldview PRODUCT_WORLDVIEW = new ProductWorldview();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProductWorldviewRecord> getRecordType() {
        return ProductWorldviewRecord.class;
    }

    /**
     * The column <code>public.product_worldview.id</code>. 세계관 ID
     */
    public final TableField<ProductWorldviewRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "세계관 ID");

    /**
     * The column <code>public.product_worldview.geography</code>. 지리
     */
    public final TableField<ProductWorldviewRecord, String> GEOGRAPHY = createField(DSL.name("geography"), SQLDataType.CLOB, this, "지리");

    /**
     * The column <code>public.product_worldview.history</code>. 역사
     */
    public final TableField<ProductWorldviewRecord, String> HISTORY = createField(DSL.name("history"), SQLDataType.CLOB, this, "역사");

    /**
     * The column <code>public.product_worldview.politics</code>. 정치
     */
    public final TableField<ProductWorldviewRecord, String> POLITICS = createField(DSL.name("politics"), SQLDataType.CLOB, this, "정치");

    /**
     * The column <code>public.product_worldview.society</code>. 사회
     */
    public final TableField<ProductWorldviewRecord, String> SOCIETY = createField(DSL.name("society"), SQLDataType.CLOB, this, "사회");

    /**
     * The column <code>public.product_worldview.religion</code>. 종교
     */
    public final TableField<ProductWorldviewRecord, String> RELIGION = createField(DSL.name("religion"), SQLDataType.CLOB, this, "종교");

    /**
     * The column <code>public.product_worldview.economy</code>. 경제
     */
    public final TableField<ProductWorldviewRecord, String> ECONOMY = createField(DSL.name("economy"), SQLDataType.CLOB, this, "경제");

    /**
     * The column <code>public.product_worldview.technology</code>. 기술
     */
    public final TableField<ProductWorldviewRecord, String> TECHNOLOGY = createField(DSL.name("technology"), SQLDataType.CLOB, this, "기술");

    /**
     * The column <code>public.product_worldview.lifestyle</code>. 생활
     */
    public final TableField<ProductWorldviewRecord, String> LIFESTYLE = createField(DSL.name("lifestyle"), SQLDataType.CLOB, this, "생활");

    /**
     * The column <code>public.product_worldview.language</code>. 언어
     */
    public final TableField<ProductWorldviewRecord, String> LANGUAGE = createField(DSL.name("language"), SQLDataType.CLOB, this, "언어");

    /**
     * The column <code>public.product_worldview.culture</code>. 문화
     */
    public final TableField<ProductWorldviewRecord, String> CULTURE = createField(DSL.name("culture"), SQLDataType.CLOB, this, "문화");

    /**
     * The column <code>public.product_worldview.species</code>. 종족
     */
    public final TableField<ProductWorldviewRecord, String> SPECIES = createField(DSL.name("species"), SQLDataType.CLOB, this, "종족");

    /**
     * The column <code>public.product_worldview.occupation</code>. 직업
     */
    public final TableField<ProductWorldviewRecord, String> OCCUPATION = createField(DSL.name("occupation"), SQLDataType.CLOB, this, "직업");

    /**
     * The column <code>public.product_worldview.conflict</code>. 갈등 관계
     */
    public final TableField<ProductWorldviewRecord, String> CONFLICT = createField(DSL.name("conflict"), SQLDataType.CLOB, this, "갈등 관계");

    /**
     * The column <code>public.product_worldview.created_at</code>. 생성일시
     */
    public final TableField<ProductWorldviewRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "생성일시");

    /**
     * The column <code>public.product_worldview.created_by</code>. 생성자 ID
     */
    public final TableField<ProductWorldviewRecord, UUID> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.UUID.nullable(false), this, "생성자 ID");

    /**
     * The column <code>public.product_worldview.updated_at</code>. 수정일시
     */
    public final TableField<ProductWorldviewRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "수정일시");

    /**
     * The column <code>public.product_worldview.updated_by</code>. 수정자 ID
     */
    public final TableField<ProductWorldviewRecord, UUID> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.UUID.nullable(false), this, "수정자 ID");

    private ProductWorldview(Name alias, Table<ProductWorldviewRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ProductWorldview(Name alias, Table<ProductWorldviewRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("작품 세계관"), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.product_worldview</code> table reference
     */
    public ProductWorldview(String alias) {
        this(DSL.name(alias), PRODUCT_WORLDVIEW);
    }

    /**
     * Create an aliased <code>public.product_worldview</code> table reference
     */
    public ProductWorldview(Name alias) {
        this(alias, PRODUCT_WORLDVIEW);
    }

    /**
     * Create a <code>public.product_worldview</code> table reference
     */
    public ProductWorldview() {
        this(DSL.name("product_worldview"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<ProductWorldviewRecord> getPrimaryKey() {
        return Keys.PRODUCT_WORLDVIEW_PK;
    }

    @Override
    public ProductWorldview as(String alias) {
        return new ProductWorldview(DSL.name(alias), this);
    }

    @Override
    public ProductWorldview as(Name alias) {
        return new ProductWorldview(alias, this);
    }

    @Override
    public ProductWorldview as(Table<?> alias) {
        return new ProductWorldview(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductWorldview rename(String name) {
        return new ProductWorldview(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductWorldview rename(Name name) {
        return new ProductWorldview(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductWorldview rename(Table<?> name) {
        return new ProductWorldview(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProductWorldview where(Condition condition) {
        return new ProductWorldview(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProductWorldview where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProductWorldview where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProductWorldview where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProductWorldview where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProductWorldview where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProductWorldview where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProductWorldview where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProductWorldview whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProductWorldview whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
