/*
 * This file is generated by jOOQ.
 */
package writeon.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import writeon.Indexes;
import writeon.Keys;
import writeon.Public;
import writeon.tables.records.ProductFavoritePromptRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ProductFavoritePrompt extends TableImpl<ProductFavoritePromptRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.product_favorite_prompt</code>
     */
    public static final ProductFavoritePrompt PRODUCT_FAVORITE_PROMPT = new ProductFavoritePrompt();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProductFavoritePromptRecord> getRecordType() {
        return ProductFavoritePromptRecord.class;
    }

    /**
     * The column <code>public.product_favorite_prompt.id</code>.
     */
    public final TableField<ProductFavoritePromptRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("gen_random_uuid()"), SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.product_favorite_prompt.product_id</code>.
     */
    public final TableField<ProductFavoritePromptRecord, UUID> PRODUCT_ID = createField(DSL.name("product_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.product_favorite_prompt.message_id</code>.
     */
    public final TableField<ProductFavoritePromptRecord, UUID> MESSAGE_ID = createField(DSL.name("message_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.product_favorite_prompt.created_at</code>.
     */
    public final TableField<ProductFavoritePromptRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    private ProductFavoritePrompt(Name alias, Table<ProductFavoritePromptRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ProductFavoritePrompt(Name alias, Table<ProductFavoritePromptRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.product_favorite_prompt</code> table
     * reference
     */
    public ProductFavoritePrompt(String alias) {
        this(DSL.name(alias), PRODUCT_FAVORITE_PROMPT);
    }

    /**
     * Create an aliased <code>public.product_favorite_prompt</code> table
     * reference
     */
    public ProductFavoritePrompt(Name alias) {
        this(alias, PRODUCT_FAVORITE_PROMPT);
    }

    /**
     * Create a <code>public.product_favorite_prompt</code> table reference
     */
    public ProductFavoritePrompt() {
        this(DSL.name("product_favorite_prompt"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_PROMPT_PRODUCT_ID);
    }

    @Override
    public UniqueKey<ProductFavoritePromptRecord> getPrimaryKey() {
        return Keys.PRODUCT_FAVORITE_PROMPT_PK;
    }

    @Override
    public ProductFavoritePrompt as(String alias) {
        return new ProductFavoritePrompt(DSL.name(alias), this);
    }

    @Override
    public ProductFavoritePrompt as(Name alias) {
        return new ProductFavoritePrompt(alias, this);
    }

    @Override
    public ProductFavoritePrompt as(Table<?> alias) {
        return new ProductFavoritePrompt(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductFavoritePrompt rename(String name) {
        return new ProductFavoritePrompt(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductFavoritePrompt rename(Name name) {
        return new ProductFavoritePrompt(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductFavoritePrompt rename(Table<?> name) {
        return new ProductFavoritePrompt(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProductFavoritePrompt where(Condition condition) {
        return new ProductFavoritePrompt(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProductFavoritePrompt where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProductFavoritePrompt where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProductFavoritePrompt where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProductFavoritePrompt where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProductFavoritePrompt where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProductFavoritePrompt where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProductFavoritePrompt where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProductFavoritePrompt whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProductFavoritePrompt whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
