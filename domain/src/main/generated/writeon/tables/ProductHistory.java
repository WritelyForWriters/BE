/*
 * This file is generated by jOOQ.
 */
package writeon.tables;


import java.time.LocalDateTime;
import java.util.Collection;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import writeon.Keys;
import writeon.Public;
import writeon.tables.records.ProductHistoryRecord;


/**
 * 작품 변경 이력
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ProductHistory extends TableImpl<ProductHistoryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.product_history</code>
     */
    public static final ProductHistory PRODUCT_HISTORY = new ProductHistory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProductHistoryRecord> getRecordType() {
        return ProductHistoryRecord.class;
    }

    /**
     * The column <code>public.product_history.id</code>. 이력 ID
     */
    public final TableField<ProductHistoryRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("gen_random_uuid()"), SQLDataType.UUID)), this, "이력 ID");

    /**
     * The column <code>public.product_history.product_id</code>. 작품 ID
     */
    public final TableField<ProductHistoryRecord, UUID> PRODUCT_ID = createField(DSL.name("product_id"), SQLDataType.UUID.nullable(false), this, "작품 ID");

    /**
     * The column <code>public.product_history.title</code>. 제목
     */
    public final TableField<ProductHistoryRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(50), this, "제목");

    /**
     * The column <code>public.product_history.content</code>. 내용
     */
    public final TableField<ProductHistoryRecord, String> CONTENT = createField(DSL.name("content"), SQLDataType.CLOB, this, "내용");

    /**
     * The column <code>public.product_history.created_at</code>. 원본 생성일시
     */
    public final TableField<ProductHistoryRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "원본 생성일시");

    /**
     * The column <code>public.product_history.created_by</code>. 원본 생성자 ID
     */
    public final TableField<ProductHistoryRecord, UUID> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.UUID.nullable(false), this, "원본 생성자 ID");

    /**
     * The column <code>public.product_history.updated_at</code>. 원본 수정일시
     */
    public final TableField<ProductHistoryRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "원본 수정일시");

    /**
     * The column <code>public.product_history.updated_by</code>. 원본 수정자 ID
     */
    public final TableField<ProductHistoryRecord, UUID> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.UUID.nullable(false), this, "원본 수정자 ID");

    /**
     * The column <code>public.product_history.history_at</code>. 이력 기록 시각
     */
    public final TableField<ProductHistoryRecord, LocalDateTime> HISTORY_AT = createField(DSL.name("history_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.LOCALDATETIME)), this, "이력 기록 시각");

    private ProductHistory(Name alias, Table<ProductHistoryRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ProductHistory(Name alias, Table<ProductHistoryRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("작품 변경 이력"), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.product_history</code> table reference
     */
    public ProductHistory(String alias) {
        this(DSL.name(alias), PRODUCT_HISTORY);
    }

    /**
     * Create an aliased <code>public.product_history</code> table reference
     */
    public ProductHistory(Name alias) {
        this(alias, PRODUCT_HISTORY);
    }

    /**
     * Create a <code>public.product_history</code> table reference
     */
    public ProductHistory() {
        this(DSL.name("product_history"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<ProductHistoryRecord> getPrimaryKey() {
        return Keys.PRODUCT_HISTORY_PKEY;
    }

    @Override
    public ProductHistory as(String alias) {
        return new ProductHistory(DSL.name(alias), this);
    }

    @Override
    public ProductHistory as(Name alias) {
        return new ProductHistory(alias, this);
    }

    @Override
    public ProductHistory as(Table<?> alias) {
        return new ProductHistory(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductHistory rename(String name) {
        return new ProductHistory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductHistory rename(Name name) {
        return new ProductHistory(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductHistory rename(Table<?> name) {
        return new ProductHistory(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProductHistory where(Condition condition) {
        return new ProductHistory(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProductHistory where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProductHistory where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProductHistory where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProductHistory where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProductHistory where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProductHistory where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProductHistory where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProductHistory whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProductHistory whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
