/*
 * This file is generated by jOOQ.
 */
package writeon.tables;


import java.time.LocalDateTime;
import java.util.Collection;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import writeon.Keys;
import writeon.Public;
import writeon.tables.records.AssistantEvaluationRecord;


/**
 * 어시스턴트 평가
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class AssistantEvaluation extends TableImpl<AssistantEvaluationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.assistant_evaluation</code>
     */
    public static final AssistantEvaluation ASSISTANT_EVALUATION = new AssistantEvaluation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AssistantEvaluationRecord> getRecordType() {
        return AssistantEvaluationRecord.class;
    }

    /**
     * The column <code>public.assistant_evaluation.assistant_id</code>. 어시스턴트
     * ID
     */
    public final TableField<AssistantEvaluationRecord, UUID> ASSISTANT_ID = createField(DSL.name("assistant_id"), SQLDataType.UUID.nullable(false), this, "어시스턴트 ID");

    /**
     * The column <code>public.assistant_evaluation.is_good</code>. 만족 여부
     */
    public final TableField<AssistantEvaluationRecord, Boolean> IS_GOOD = createField(DSL.name("is_good"), SQLDataType.BOOLEAN.nullable(false), this, "만족 여부");

    /**
     * The column <code>public.assistant_evaluation.feedback</code>. 피드백
     */
    public final TableField<AssistantEvaluationRecord, String> FEEDBACK = createField(DSL.name("feedback"), SQLDataType.VARCHAR(255), this, "피드백");

    /**
     * The column <code>public.assistant_evaluation.created_at</code>. 생성일시
     */
    public final TableField<AssistantEvaluationRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "생성일시");

    /**
     * The column <code>public.assistant_evaluation.created_by</code>. 생성자 ID
     */
    public final TableField<AssistantEvaluationRecord, UUID> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.UUID.nullable(false), this, "생성자 ID");

    private AssistantEvaluation(Name alias, Table<AssistantEvaluationRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private AssistantEvaluation(Name alias, Table<AssistantEvaluationRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("어시스턴트 평가"), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.assistant_evaluation</code> table
     * reference
     */
    public AssistantEvaluation(String alias) {
        this(DSL.name(alias), ASSISTANT_EVALUATION);
    }

    /**
     * Create an aliased <code>public.assistant_evaluation</code> table
     * reference
     */
    public AssistantEvaluation(Name alias) {
        this(alias, ASSISTANT_EVALUATION);
    }

    /**
     * Create a <code>public.assistant_evaluation</code> table reference
     */
    public AssistantEvaluation() {
        this(DSL.name("assistant_evaluation"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<AssistantEvaluationRecord> getPrimaryKey() {
        return Keys.ASSISTANT_EVALUATION_PK;
    }

    @Override
    public AssistantEvaluation as(String alias) {
        return new AssistantEvaluation(DSL.name(alias), this);
    }

    @Override
    public AssistantEvaluation as(Name alias) {
        return new AssistantEvaluation(alias, this);
    }

    @Override
    public AssistantEvaluation as(Table<?> alias) {
        return new AssistantEvaluation(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public AssistantEvaluation rename(String name) {
        return new AssistantEvaluation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AssistantEvaluation rename(Name name) {
        return new AssistantEvaluation(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public AssistantEvaluation rename(Table<?> name) {
        return new AssistantEvaluation(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AssistantEvaluation where(Condition condition) {
        return new AssistantEvaluation(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AssistantEvaluation where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AssistantEvaluation where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AssistantEvaluation where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AssistantEvaluation where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AssistantEvaluation where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AssistantEvaluation where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AssistantEvaluation where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AssistantEvaluation whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AssistantEvaluation whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
