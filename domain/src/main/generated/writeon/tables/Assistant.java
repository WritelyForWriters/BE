/*
 * This file is generated by jOOQ.
 */
package writeon.tables;


import java.time.LocalDateTime;
import java.util.Collection;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import writeon.Keys;
import writeon.Public;
import writeon.tables.records.AssistantRecord;


/**
 * 어시스턴트
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Assistant extends TableImpl<AssistantRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.assistant</code>
     */
    public static final Assistant ASSISTANT = new Assistant();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AssistantRecord> getRecordType() {
        return AssistantRecord.class;
    }

    /**
     * The column <code>public.assistant.id</code>.
     */
    public final TableField<AssistantRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.assistant.product_id</code>. 작품 ID
     */
    public final TableField<AssistantRecord, UUID> PRODUCT_ID = createField(DSL.name("product_id"), SQLDataType.UUID.nullable(false), this, "작품 ID");

    /**
     * The column <code>public.assistant.type</code>. 기능 종류
     */
    public final TableField<AssistantRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(20).nullable(false), this, "기능 종류");

    /**
     * The column <code>public.assistant.status</code>. 진행 상태
     */
    public final TableField<AssistantRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(20).nullable(false), this, "진행 상태");

    /**
     * The column <code>public.assistant.created_at</code>. 수정일시
     */
    public final TableField<AssistantRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "수정일시");

    /**
     * The column <code>public.assistant.created_by</code>. 수정자 ID
     */
    public final TableField<AssistantRecord, UUID> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.UUID.nullable(false), this, "수정자 ID");

    /**
     * The column <code>public.assistant.updated_at</code>.
     */
    public final TableField<AssistantRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    private Assistant(Name alias, Table<AssistantRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Assistant(Name alias, Table<AssistantRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("어시스턴트"), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.assistant</code> table reference
     */
    public Assistant(String alias) {
        this(DSL.name(alias), ASSISTANT);
    }

    /**
     * Create an aliased <code>public.assistant</code> table reference
     */
    public Assistant(Name alias) {
        this(alias, ASSISTANT);
    }

    /**
     * Create a <code>public.assistant</code> table reference
     */
    public Assistant() {
        this(DSL.name("assistant"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<AssistantRecord> getPrimaryKey() {
        return Keys.ASSISTANT_PK;
    }

    @Override
    public Assistant as(String alias) {
        return new Assistant(DSL.name(alias), this);
    }

    @Override
    public Assistant as(Name alias) {
        return new Assistant(alias, this);
    }

    @Override
    public Assistant as(Table<?> alias) {
        return new Assistant(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Assistant rename(String name) {
        return new Assistant(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Assistant rename(Name name) {
        return new Assistant(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Assistant rename(Table<?> name) {
        return new Assistant(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Assistant where(Condition condition) {
        return new Assistant(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Assistant where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Assistant where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Assistant where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Assistant where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Assistant where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Assistant where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Assistant where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Assistant whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Assistant whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
