/*
 * This file is generated by jOOQ.
 */
package writeon.tables;


import java.time.LocalDateTime;
import java.util.Collection;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import writeon.Keys;
import writeon.Public;
import writeon.tables.records.ProductSynopsisRecord;


/**
 * 작품 시놉시스
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ProductSynopsis extends TableImpl<ProductSynopsisRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.product_synopsis</code>
     */
    public static final ProductSynopsis PRODUCT_SYNOPSIS = new ProductSynopsis();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProductSynopsisRecord> getRecordType() {
        return ProductSynopsisRecord.class;
    }

    /**
     * The column <code>public.product_synopsis.id</code>. 시놉시스 ID
     */
    public final TableField<ProductSynopsisRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "시놉시스 ID");

    /**
     * The column <code>public.product_synopsis.genre</code>. 장르
     */
    public final TableField<ProductSynopsisRecord, String> GENRE = createField(DSL.name("genre"), SQLDataType.VARCHAR(30).nullable(false), this, "장르");

    /**
     * The column <code>public.product_synopsis.length</code>. 분량
     */
    public final TableField<ProductSynopsisRecord, String> LENGTH = createField(DSL.name("length"), SQLDataType.VARCHAR(100), this, "분량");

    /**
     * The column <code>public.product_synopsis.purpose</code>. 기획 의도
     */
    public final TableField<ProductSynopsisRecord, String> PURPOSE = createField(DSL.name("purpose"), SQLDataType.CLOB, this, "기획 의도");

    /**
     * The column <code>public.product_synopsis.logline</code>. 로그라인
     */
    public final TableField<ProductSynopsisRecord, String> LOGLINE = createField(DSL.name("logline"), SQLDataType.CLOB.nullable(false), this, "로그라인");

    /**
     * The column <code>public.product_synopsis.example</code>. 예시 문장
     */
    public final TableField<ProductSynopsisRecord, String> EXAMPLE = createField(DSL.name("example"), SQLDataType.CLOB, this, "예시 문장");

    /**
     * The column <code>public.product_synopsis.created_at</code>. 생성일시
     */
    public final TableField<ProductSynopsisRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "생성일시");

    /**
     * The column <code>public.product_synopsis.created_by</code>. 생성자 ID
     */
    public final TableField<ProductSynopsisRecord, UUID> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.UUID.nullable(false), this, "생성자 ID");

    /**
     * The column <code>public.product_synopsis.updated_at</code>. 수정일시
     */
    public final TableField<ProductSynopsisRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "수정일시");

    /**
     * The column <code>public.product_synopsis.updated_by</code>. 수정자 ID
     */
    public final TableField<ProductSynopsisRecord, UUID> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.UUID.nullable(false), this, "수정자 ID");

    private ProductSynopsis(Name alias, Table<ProductSynopsisRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ProductSynopsis(Name alias, Table<ProductSynopsisRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("작품 시놉시스"), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.product_synopsis</code> table reference
     */
    public ProductSynopsis(String alias) {
        this(DSL.name(alias), PRODUCT_SYNOPSIS);
    }

    /**
     * Create an aliased <code>public.product_synopsis</code> table reference
     */
    public ProductSynopsis(Name alias) {
        this(alias, PRODUCT_SYNOPSIS);
    }

    /**
     * Create a <code>public.product_synopsis</code> table reference
     */
    public ProductSynopsis() {
        this(DSL.name("product_synopsis"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<ProductSynopsisRecord> getPrimaryKey() {
        return Keys.PRODUCT_SYNOPSIS_PK;
    }

    @Override
    public ProductSynopsis as(String alias) {
        return new ProductSynopsis(DSL.name(alias), this);
    }

    @Override
    public ProductSynopsis as(Name alias) {
        return new ProductSynopsis(alias, this);
    }

    @Override
    public ProductSynopsis as(Table<?> alias) {
        return new ProductSynopsis(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductSynopsis rename(String name) {
        return new ProductSynopsis(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductSynopsis rename(Name name) {
        return new ProductSynopsis(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductSynopsis rename(Table<?> name) {
        return new ProductSynopsis(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProductSynopsis where(Condition condition) {
        return new ProductSynopsis(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProductSynopsis where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProductSynopsis where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProductSynopsis where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProductSynopsis where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProductSynopsis where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProductSynopsis where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProductSynopsis where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProductSynopsis whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProductSynopsis whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
