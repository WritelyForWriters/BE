/*
 * This file is generated by jOOQ.
 */
package writeon.tables.records;


import java.time.LocalDateTime;
import java.util.UUID;

import org.jooq.impl.TableRecordImpl;

import writeon.tables.Assistant;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class AssistantRecord extends TableRecordImpl<AssistantRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.assistant.id</code>.
     */
    public AssistantRecord setId(UUID value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.assistant.id</code>.
     */
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.assistant.product_id</code>.
     */
    public AssistantRecord setProductId(UUID value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.assistant.product_id</code>.
     */
    public UUID getProductId() {
        return (UUID) get(1);
    }

    /**
     * Setter for <code>public.assistant.type</code>.
     */
    public AssistantRecord setType(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.assistant.type</code>.
     */
    public String getType() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.assistant.status</code>.
     */
    public AssistantRecord setStatus(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.assistant.status</code>.
     */
    public String getStatus() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.assistant.is_applied</code>.
     */
    public AssistantRecord setIsApplied(Boolean value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.assistant.is_applied</code>.
     */
    public Boolean getIsApplied() {
        return (Boolean) get(4);
    }

    /**
     * Setter for <code>public.assistant.created_at</code>.
     */
    public AssistantRecord setCreatedAt(LocalDateTime value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>public.assistant.created_at</code>.
     */
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(5);
    }

    /**
     * Setter for <code>public.assistant.created_by</code>.
     */
    public AssistantRecord setCreatedBy(UUID value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>public.assistant.created_by</code>.
     */
    public UUID getCreatedBy() {
        return (UUID) get(6);
    }

    /**
     * Setter for <code>public.assistant.updated_at</code>.
     */
    public AssistantRecord setUpdatedAt(LocalDateTime value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>public.assistant.updated_at</code>.
     */
    public LocalDateTime getUpdatedAt() {
        return (LocalDateTime) get(7);
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AssistantRecord
     */
    public AssistantRecord() {
        super(Assistant.ASSISTANT);
    }

    /**
     * Create a detached, initialised AssistantRecord
     */
    public AssistantRecord(UUID id, UUID productId, String type, String status, Boolean isApplied, LocalDateTime createdAt, UUID createdBy, LocalDateTime updatedAt) {
        super(Assistant.ASSISTANT);

        setId(id);
        setProductId(productId);
        setType(type);
        setStatus(status);
        setIsApplied(isApplied);
        setCreatedAt(createdAt);
        setCreatedBy(createdBy);
        setUpdatedAt(updatedAt);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised AssistantRecord
     */
    public AssistantRecord(writeon.tables.pojos.Assistant value) {
        super(Assistant.ASSISTANT);

        if (value != null) {
            setId(value.getId());
            setProductId(value.getProductId());
            setType(value.getType());
            setStatus(value.getStatus());
            setIsApplied(value.getIsApplied());
            setCreatedAt(value.getCreatedAt());
            setCreatedBy(value.getCreatedBy());
            setUpdatedAt(value.getUpdatedAt());
            resetChangedOnNotNull();
        }
    }
}
