/*
 * This file is generated by jOOQ.
 */
package writeon.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import writeon.Keys;
import writeon.Public;
import writeon.tables.Product.ProductPath;
import writeon.tables.records.ProductFixedMessageRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ProductFixedMessage extends TableImpl<ProductFixedMessageRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.product_fixed_message</code>
     */
    public static final ProductFixedMessage PRODUCT_FIXED_MESSAGE = new ProductFixedMessage();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProductFixedMessageRecord> getRecordType() {
        return ProductFixedMessageRecord.class;
    }

    /**
     * The column <code>public.product_fixed_message.product_id</code>.
     */
    public final TableField<ProductFixedMessageRecord, UUID> PRODUCT_ID = createField(DSL.name("product_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.product_fixed_message.message_id</code>.
     */
    public final TableField<ProductFixedMessageRecord, UUID> MESSAGE_ID = createField(DSL.name("message_id"), SQLDataType.UUID.nullable(false), this, "");

    private ProductFixedMessage(Name alias, Table<ProductFixedMessageRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ProductFixedMessage(Name alias, Table<ProductFixedMessageRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.product_fixed_message</code> table
     * reference
     */
    public ProductFixedMessage(String alias) {
        this(DSL.name(alias), PRODUCT_FIXED_MESSAGE);
    }

    /**
     * Create an aliased <code>public.product_fixed_message</code> table
     * reference
     */
    public ProductFixedMessage(Name alias) {
        this(alias, PRODUCT_FIXED_MESSAGE);
    }

    /**
     * Create a <code>public.product_fixed_message</code> table reference
     */
    public ProductFixedMessage() {
        this(DSL.name("product_fixed_message"), null);
    }

    public <O extends Record> ProductFixedMessage(Table<O> path, ForeignKey<O, ProductFixedMessageRecord> childPath, InverseForeignKey<O, ProductFixedMessageRecord> parentPath) {
        super(path, childPath, parentPath, PRODUCT_FIXED_MESSAGE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ProductFixedMessagePath extends ProductFixedMessage implements Path<ProductFixedMessageRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ProductFixedMessagePath(Table<O> path, ForeignKey<O, ProductFixedMessageRecord> childPath, InverseForeignKey<O, ProductFixedMessageRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ProductFixedMessagePath(Name alias, Table<ProductFixedMessageRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ProductFixedMessagePath as(String alias) {
            return new ProductFixedMessagePath(DSL.name(alias), this);
        }

        @Override
        public ProductFixedMessagePath as(Name alias) {
            return new ProductFixedMessagePath(alias, this);
        }

        @Override
        public ProductFixedMessagePath as(Table<?> alias) {
            return new ProductFixedMessagePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<ProductFixedMessageRecord> getPrimaryKey() {
        return Keys.PRODUCT_FIXED_MESSAGE_PKEY;
    }

    @Override
    public List<ForeignKey<ProductFixedMessageRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PRODUCT_FIXED_MESSAGE__FK_PRODUCT);
    }

    private transient ProductPath _product;

    /**
     * Get the implicit join path to the <code>public.product</code> table.
     */
    public ProductPath product() {
        if (_product == null)
            _product = new ProductPath(this, Keys.PRODUCT_FIXED_MESSAGE__FK_PRODUCT, null);

        return _product;
    }

    @Override
    public ProductFixedMessage as(String alias) {
        return new ProductFixedMessage(DSL.name(alias), this);
    }

    @Override
    public ProductFixedMessage as(Name alias) {
        return new ProductFixedMessage(alias, this);
    }

    @Override
    public ProductFixedMessage as(Table<?> alias) {
        return new ProductFixedMessage(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductFixedMessage rename(String name) {
        return new ProductFixedMessage(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductFixedMessage rename(Name name) {
        return new ProductFixedMessage(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductFixedMessage rename(Table<?> name) {
        return new ProductFixedMessage(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProductFixedMessage where(Condition condition) {
        return new ProductFixedMessage(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProductFixedMessage where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProductFixedMessage where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProductFixedMessage where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProductFixedMessage where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProductFixedMessage where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProductFixedMessage where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProductFixedMessage where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProductFixedMessage whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProductFixedMessage whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
