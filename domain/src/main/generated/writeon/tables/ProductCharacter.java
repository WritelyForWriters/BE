/*
 * This file is generated by jOOQ.
 */
package writeon.tables;


import java.time.LocalDateTime;
import java.util.Collection;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import writeon.Keys;
import writeon.Public;
import writeon.tables.records.ProductCharacterRecord;


/**
 * 작품 등장인물
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ProductCharacter extends TableImpl<ProductCharacterRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.product_character</code>
     */
    public static final ProductCharacter PRODUCT_CHARACTER = new ProductCharacter();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProductCharacterRecord> getRecordType() {
        return ProductCharacterRecord.class;
    }

    /**
     * The column <code>public.product_character.id</code>. 등장인물 ID
     */
    public final TableField<ProductCharacterRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("gen_random_uuid()"), SQLDataType.UUID)), this, "등장인물 ID");

    /**
     * The column <code>public.product_character.product_id</code>. 작품 ID
     */
    public final TableField<ProductCharacterRecord, UUID> PRODUCT_ID = createField(DSL.name("product_id"), SQLDataType.UUID.nullable(false), this, "작품 ID");

    /**
     * The column <code>public.product_character.intro</code>. 소개
     */
    public final TableField<ProductCharacterRecord, String> INTRO = createField(DSL.name("intro"), SQLDataType.CLOB, this, "소개");

    /**
     * The column <code>public.product_character.name</code>. 이름
     */
    public final TableField<ProductCharacterRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(50), this, "이름");

    /**
     * The column <code>public.product_character.age</code>. 나이
     */
    public final TableField<ProductCharacterRecord, Integer> AGE = createField(DSL.name("age"), SQLDataType.INTEGER, this, "나이");

    /**
     * The column <code>public.product_character.gender</code>. 성별
     */
    public final TableField<ProductCharacterRecord, String> GENDER = createField(DSL.name("gender"), SQLDataType.VARCHAR(10), this, "성별");

    /**
     * The column <code>public.product_character.occupation</code>. 직업
     */
    public final TableField<ProductCharacterRecord, String> OCCUPATION = createField(DSL.name("occupation"), SQLDataType.CLOB, this, "직업");

    /**
     * The column <code>public.product_character.appearance</code>. 외모
     */
    public final TableField<ProductCharacterRecord, String> APPEARANCE = createField(DSL.name("appearance"), SQLDataType.CLOB, this, "외모");

    /**
     * The column <code>public.product_character.personality</code>. 성격
     */
    public final TableField<ProductCharacterRecord, String> PERSONALITY = createField(DSL.name("personality"), SQLDataType.CLOB, this, "성격");

    /**
     * The column <code>public.product_character.characteristic</code>. 특징
     */
    public final TableField<ProductCharacterRecord, String> CHARACTERISTIC = createField(DSL.name("characteristic"), SQLDataType.CLOB, this, "특징");

    /**
     * The column <code>public.product_character.relationship</code>. 주요 관계
     */
    public final TableField<ProductCharacterRecord, String> RELATIONSHIP = createField(DSL.name("relationship"), SQLDataType.CLOB, this, "주요 관계");

    /**
     * The column <code>public.product_character.created_at</code>. 생성일시
     */
    public final TableField<ProductCharacterRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "생성일시");

    /**
     * The column <code>public.product_character.created_by</code>. 생성자 ID
     */
    public final TableField<ProductCharacterRecord, UUID> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.UUID.nullable(false), this, "생성자 ID");

    /**
     * The column <code>public.product_character.updated_at</code>. 수정일시
     */
    public final TableField<ProductCharacterRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "수정일시");

    /**
     * The column <code>public.product_character.updated_by</code>. 수정자 ID
     */
    public final TableField<ProductCharacterRecord, UUID> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.UUID.nullable(false), this, "수정자 ID");

    private ProductCharacter(Name alias, Table<ProductCharacterRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ProductCharacter(Name alias, Table<ProductCharacterRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("작품 등장인물"), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.product_character</code> table reference
     */
    public ProductCharacter(String alias) {
        this(DSL.name(alias), PRODUCT_CHARACTER);
    }

    /**
     * Create an aliased <code>public.product_character</code> table reference
     */
    public ProductCharacter(Name alias) {
        this(alias, PRODUCT_CHARACTER);
    }

    /**
     * Create a <code>public.product_character</code> table reference
     */
    public ProductCharacter() {
        this(DSL.name("product_character"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<ProductCharacterRecord> getPrimaryKey() {
        return Keys.PRODUCT_CHARACTER_PK;
    }

    @Override
    public ProductCharacter as(String alias) {
        return new ProductCharacter(DSL.name(alias), this);
    }

    @Override
    public ProductCharacter as(Name alias) {
        return new ProductCharacter(alias, this);
    }

    @Override
    public ProductCharacter as(Table<?> alias) {
        return new ProductCharacter(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductCharacter rename(String name) {
        return new ProductCharacter(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductCharacter rename(Name name) {
        return new ProductCharacter(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductCharacter rename(Table<?> name) {
        return new ProductCharacter(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProductCharacter where(Condition condition) {
        return new ProductCharacter(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProductCharacter where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProductCharacter where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProductCharacter where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProductCharacter where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProductCharacter where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProductCharacter where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProductCharacter where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProductCharacter whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProductCharacter whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
