/*
 * This file is generated by jOOQ.
 */
package writely.tables;


import java.time.LocalDateTime;
import java.util.Collection;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import writely.Keys;
import writely.Public;
import writely.tables.records.ResearchMessageRecord;


/**
 * 자유 대화 메세지
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ResearchMessage extends TableImpl<ResearchMessageRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.research_message</code>
     */
    public static final ResearchMessage RESEARCH_MESSAGE = new ResearchMessage();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ResearchMessageRecord> getRecordType() {
        return ResearchMessageRecord.class;
    }

    /**
     * The column <code>public.research_message.id</code>. 자유 대화 메세지 ID
     */
    public final TableField<ResearchMessageRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("gen_random_uuid()"), SQLDataType.UUID)), this, "자유 대화 메세지 ID");

    /**
     * The column <code>public.research_message.assistant_id</code>. 어시스턴트 ID
     */
    public final TableField<ResearchMessageRecord, UUID> ASSISTANT_ID = createField(DSL.name("assistant_id"), SQLDataType.UUID.nullable(false), this, "어시스턴트 ID");

    /**
     * The column <code>public.research_message.role</code>. 메세지 송신자
     */
    public final TableField<ResearchMessageRecord, String> ROLE = createField(DSL.name("role"), SQLDataType.VARCHAR(10).nullable(false), this, "메세지 송신자");

    /**
     * The column <code>public.research_message.content</code>. 내용
     */
    public final TableField<ResearchMessageRecord, String> CONTENT = createField(DSL.name("content"), SQLDataType.CLOB, this, "내용");

    /**
     * The column <code>public.research_message.prompt</code>. 프롬프트
     */
    public final TableField<ResearchMessageRecord, String> PROMPT = createField(DSL.name("prompt"), SQLDataType.CLOB, this, "프롬프트");

    /**
     * The column <code>public.research_message.created_at</code>. 생성일시
     */
    public final TableField<ResearchMessageRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "생성일시");

    /**
     * The column <code>public.research_message.created_by</code>. 생성자 ID
     */
    public final TableField<ResearchMessageRecord, UUID> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.UUID.nullable(false), this, "생성자 ID");

    /**
     * The column <code>public.research_message.updated_at</code>. 수정일시
     */
    public final TableField<ResearchMessageRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "수정일시");

    /**
     * The column <code>public.research_message.updated_by</code>. 수정자 ID
     */
    public final TableField<ResearchMessageRecord, UUID> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.UUID.nullable(false), this, "수정자 ID");

    private ResearchMessage(Name alias, Table<ResearchMessageRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ResearchMessage(Name alias, Table<ResearchMessageRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("자유 대화 메세지"), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.research_message</code> table reference
     */
    public ResearchMessage(String alias) {
        this(DSL.name(alias), RESEARCH_MESSAGE);
    }

    /**
     * Create an aliased <code>public.research_message</code> table reference
     */
    public ResearchMessage(Name alias) {
        this(alias, RESEARCH_MESSAGE);
    }

    /**
     * Create a <code>public.research_message</code> table reference
     */
    public ResearchMessage() {
        this(DSL.name("research_message"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<ResearchMessageRecord> getPrimaryKey() {
        return Keys.RESEARCH_MESSAGE_PK;
    }

    @Override
    public ResearchMessage as(String alias) {
        return new ResearchMessage(DSL.name(alias), this);
    }

    @Override
    public ResearchMessage as(Name alias) {
        return new ResearchMessage(alias, this);
    }

    @Override
    public ResearchMessage as(Table<?> alias) {
        return new ResearchMessage(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ResearchMessage rename(String name) {
        return new ResearchMessage(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ResearchMessage rename(Name name) {
        return new ResearchMessage(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ResearchMessage rename(Table<?> name) {
        return new ResearchMessage(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ResearchMessage where(Condition condition) {
        return new ResearchMessage(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ResearchMessage where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ResearchMessage where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ResearchMessage where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ResearchMessage where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ResearchMessage where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ResearchMessage where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ResearchMessage where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ResearchMessage whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ResearchMessage whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
