/*
 * This file is generated by jOOQ.
 */
package writely.tables.pojos;


import java.io.Serializable;
import java.time.LocalDateTime;
import java.util.UUID;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ChatMessage implements Serializable {

    private static final long serialVersionUID = 1L;

    private final UUID id;
    private final UUID assistantId;
    private final String role;
    private final String content;
    private final String prompt;
    private final LocalDateTime createdAt;
    private final UUID createdBy;
    private final LocalDateTime updatedAt;
    private final UUID updatedBy;

    public ChatMessage(ChatMessage value) {
        this.id = value.id;
        this.assistantId = value.assistantId;
        this.role = value.role;
        this.content = value.content;
        this.prompt = value.prompt;
        this.createdAt = value.createdAt;
        this.createdBy = value.createdBy;
        this.updatedAt = value.updatedAt;
        this.updatedBy = value.updatedBy;
    }

    public ChatMessage(
        UUID id,
        UUID assistantId,
        String role,
        String content,
        String prompt,
        LocalDateTime createdAt,
        UUID createdBy,
        LocalDateTime updatedAt,
        UUID updatedBy
    ) {
        this.id = id;
        this.assistantId = assistantId;
        this.role = role;
        this.content = content;
        this.prompt = prompt;
        this.createdAt = createdAt;
        this.createdBy = createdBy;
        this.updatedAt = updatedAt;
        this.updatedBy = updatedBy;
    }

    /**
     * Getter for <code>public.chat_message.id</code>.
     */
    public UUID getId() {
        return this.id;
    }

    /**
     * Getter for <code>public.chat_message.assistant_id</code>.
     */
    public UUID getAssistantId() {
        return this.assistantId;
    }

    /**
     * Getter for <code>public.chat_message.role</code>.
     */
    public String getRole() {
        return this.role;
    }

    /**
     * Getter for <code>public.chat_message.content</code>.
     */
    public String getContent() {
        return this.content;
    }

    /**
     * Getter for <code>public.chat_message.prompt</code>.
     */
    public String getPrompt() {
        return this.prompt;
    }

    /**
     * Getter for <code>public.chat_message.created_at</code>.
     */
    public LocalDateTime getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Getter for <code>public.chat_message.created_by</code>.
     */
    public UUID getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Getter for <code>public.chat_message.updated_at</code>.
     */
    public LocalDateTime getUpdatedAt() {
        return this.updatedAt;
    }

    /**
     * Getter for <code>public.chat_message.updated_by</code>.
     */
    public UUID getUpdatedBy() {
        return this.updatedBy;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final ChatMessage other = (ChatMessage) obj;
        if (this.id == null) {
            if (other.id != null)
                return false;
        }
        else if (!this.id.equals(other.id))
            return false;
        if (this.assistantId == null) {
            if (other.assistantId != null)
                return false;
        }
        else if (!this.assistantId.equals(other.assistantId))
            return false;
        if (this.role == null) {
            if (other.role != null)
                return false;
        }
        else if (!this.role.equals(other.role))
            return false;
        if (this.content == null) {
            if (other.content != null)
                return false;
        }
        else if (!this.content.equals(other.content))
            return false;
        if (this.prompt == null) {
            if (other.prompt != null)
                return false;
        }
        else if (!this.prompt.equals(other.prompt))
            return false;
        if (this.createdAt == null) {
            if (other.createdAt != null)
                return false;
        }
        else if (!this.createdAt.equals(other.createdAt))
            return false;
        if (this.createdBy == null) {
            if (other.createdBy != null)
                return false;
        }
        else if (!this.createdBy.equals(other.createdBy))
            return false;
        if (this.updatedAt == null) {
            if (other.updatedAt != null)
                return false;
        }
        else if (!this.updatedAt.equals(other.updatedAt))
            return false;
        if (this.updatedBy == null) {
            if (other.updatedBy != null)
                return false;
        }
        else if (!this.updatedBy.equals(other.updatedBy))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.assistantId == null) ? 0 : this.assistantId.hashCode());
        result = prime * result + ((this.role == null) ? 0 : this.role.hashCode());
        result = prime * result + ((this.content == null) ? 0 : this.content.hashCode());
        result = prime * result + ((this.prompt == null) ? 0 : this.prompt.hashCode());
        result = prime * result + ((this.createdAt == null) ? 0 : this.createdAt.hashCode());
        result = prime * result + ((this.createdBy == null) ? 0 : this.createdBy.hashCode());
        result = prime * result + ((this.updatedAt == null) ? 0 : this.updatedAt.hashCode());
        result = prime * result + ((this.updatedBy == null) ? 0 : this.updatedBy.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("ChatMessage (");

        sb.append(id);
        sb.append(", ").append(assistantId);
        sb.append(", ").append(role);
        sb.append(", ").append(content);
        sb.append(", ").append(prompt);
        sb.append(", ").append(createdAt);
        sb.append(", ").append(createdBy);
        sb.append(", ").append(updatedAt);
        sb.append(", ").append(updatedBy);

        sb.append(")");
        return sb.toString();
    }
}
