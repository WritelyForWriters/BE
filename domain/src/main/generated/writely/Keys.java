/*
 * This file is generated by jOOQ.
 */
package writely;


import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;

import writely.tables.Assistant;
import writely.tables.AssistantEvaluation;
import writely.tables.AutoModifyMessage;
import writely.tables.FeedbackMessage;
import writely.tables.LoginAttempt;
import writely.tables.Member;
import writely.tables.MemberPassword;
import writely.tables.Product;
import writely.tables.ProductCharacter;
import writely.tables.ProductCustomField;
import writely.tables.ProductIdeanote;
import writely.tables.ProductMemo;
import writely.tables.ProductPlot;
import writely.tables.ProductSynopsis;
import writely.tables.ProductWorldview;
import writely.tables.ResearchMessage;
import writely.tables.Terms;
import writely.tables.TermsAgreement;
import writely.tables.UserModifyMessage;
import writely.tables.records.AssistantEvaluationRecord;
import writely.tables.records.AssistantRecord;
import writely.tables.records.AutoModifyMessageRecord;
import writely.tables.records.FeedbackMessageRecord;
import writely.tables.records.LoginAttemptRecord;
import writely.tables.records.MemberPasswordRecord;
import writely.tables.records.MemberRecord;
import writely.tables.records.ProductCharacterRecord;
import writely.tables.records.ProductCustomFieldRecord;
import writely.tables.records.ProductIdeanoteRecord;
import writely.tables.records.ProductMemoRecord;
import writely.tables.records.ProductPlotRecord;
import writely.tables.records.ProductRecord;
import writely.tables.records.ProductSynopsisRecord;
import writely.tables.records.ProductWorldviewRecord;
import writely.tables.records.ResearchMessageRecord;
import writely.tables.records.TermsAgreementRecord;
import writely.tables.records.TermsRecord;
import writely.tables.records.UserModifyMessageRecord;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AssistantRecord> ASSISTANT_PK = Internal.createUniqueKey(Assistant.ASSISTANT, DSL.name("assistant_pk"), new TableField[] { Assistant.ASSISTANT.ID }, true);
    public static final UniqueKey<AssistantEvaluationRecord> ASSISTANT_EVALUATION_PK = Internal.createUniqueKey(AssistantEvaluation.ASSISTANT_EVALUATION, DSL.name("assistant_evaluation_pk"), new TableField[] { AssistantEvaluation.ASSISTANT_EVALUATION.ASSISTANT_ID }, true);
    public static final UniqueKey<AutoModifyMessageRecord> AUTO_MODIFY_MESSAGE_PK = Internal.createUniqueKey(AutoModifyMessage.AUTO_MODIFY_MESSAGE, DSL.name("auto_modify_message_pk"), new TableField[] { AutoModifyMessage.AUTO_MODIFY_MESSAGE.ID }, true);
    public static final UniqueKey<FeedbackMessageRecord> FEEDBACK_MESSAGE_PK = Internal.createUniqueKey(FeedbackMessage.FEEDBACK_MESSAGE, DSL.name("feedback_message_pk"), new TableField[] { FeedbackMessage.FEEDBACK_MESSAGE.ID }, true);
    public static final UniqueKey<LoginAttemptRecord> LOGIN_ATTEMPT_PK = Internal.createUniqueKey(LoginAttempt.LOGIN_ATTEMPT, DSL.name("login_attempt_pk"), new TableField[] { LoginAttempt.LOGIN_ATTEMPT.ID }, true);
    public static final UniqueKey<MemberRecord> EMAIL_UK = Internal.createUniqueKey(Member.MEMBER, DSL.name("email_uk"), new TableField[] { Member.MEMBER.EMAIL }, true);
    public static final UniqueKey<MemberRecord> MEMBER_PK = Internal.createUniqueKey(Member.MEMBER, DSL.name("member_pk"), new TableField[] { Member.MEMBER.ID }, true);
    public static final UniqueKey<MemberRecord> NICKNAME_UK = Internal.createUniqueKey(Member.MEMBER, DSL.name("nickname_uk"), new TableField[] { Member.MEMBER.NICKNAME }, true);
    public static final UniqueKey<MemberPasswordRecord> MEMBER_PASSWORD_PK = Internal.createUniqueKey(MemberPassword.MEMBER_PASSWORD, DSL.name("member_password_pk"), new TableField[] { MemberPassword.MEMBER_PASSWORD.MEMBER_ID }, true);
    public static final UniqueKey<ProductRecord> PRODUCT_PK = Internal.createUniqueKey(Product.PRODUCT, DSL.name("product_pk"), new TableField[] { Product.PRODUCT.ID }, true);
    public static final UniqueKey<ProductCharacterRecord> PRODUCT_CHARACTER_PK = Internal.createUniqueKey(ProductCharacter.PRODUCT_CHARACTER, DSL.name("product_character_pk"), new TableField[] { ProductCharacter.PRODUCT_CHARACTER.ID }, true);
    public static final UniqueKey<ProductCustomFieldRecord> PRODUCT_CUSTOM_FIELD_PK = Internal.createUniqueKey(ProductCustomField.PRODUCT_CUSTOM_FIELD, DSL.name("product_custom_field_pk"), new TableField[] { ProductCustomField.PRODUCT_CUSTOM_FIELD.ID }, true);
    public static final UniqueKey<ProductIdeanoteRecord> PRODUCT_IDEANOTE_PK = Internal.createUniqueKey(ProductIdeanote.PRODUCT_IDEANOTE, DSL.name("product_ideanote_pk"), new TableField[] { ProductIdeanote.PRODUCT_IDEANOTE.ID }, true);
    public static final UniqueKey<ProductMemoRecord> PRODUCT_MEMO_PK = Internal.createUniqueKey(ProductMemo.PRODUCT_MEMO, DSL.name("product_memo_pk"), new TableField[] { ProductMemo.PRODUCT_MEMO.ID }, true);
    public static final UniqueKey<ProductPlotRecord> PRODUCT_PLOT_PK = Internal.createUniqueKey(ProductPlot.PRODUCT_PLOT, DSL.name("product_plot_pk"), new TableField[] { ProductPlot.PRODUCT_PLOT.ID }, true);
    public static final UniqueKey<ProductSynopsisRecord> PRODUCT_SYNOPSIS_PK = Internal.createUniqueKey(ProductSynopsis.PRODUCT_SYNOPSIS, DSL.name("product_synopsis_pk"), new TableField[] { ProductSynopsis.PRODUCT_SYNOPSIS.ID }, true);
    public static final UniqueKey<ProductWorldviewRecord> PRODUCT_WORLDVIEW_PK = Internal.createUniqueKey(ProductWorldview.PRODUCT_WORLDVIEW, DSL.name("product_worldview_pk"), new TableField[] { ProductWorldview.PRODUCT_WORLDVIEW.ID }, true);
    public static final UniqueKey<ResearchMessageRecord> RESEARCH_MESSAGE_PK = Internal.createUniqueKey(ResearchMessage.RESEARCH_MESSAGE, DSL.name("research_message_pk"), new TableField[] { ResearchMessage.RESEARCH_MESSAGE.ID }, true);
    public static final UniqueKey<TermsRecord> TERMS_PK = Internal.createUniqueKey(Terms.TERMS, DSL.name("terms_pk"), new TableField[] { Terms.TERMS.ID }, true);
    public static final UniqueKey<TermsAgreementRecord> TERMS_AGREEMENT_PK = Internal.createUniqueKey(TermsAgreement.TERMS_AGREEMENT, DSL.name("terms_agreement_pk"), new TableField[] { TermsAgreement.TERMS_AGREEMENT.TERMS_CD, TermsAgreement.TERMS_AGREEMENT.MEMBER_ID }, true);
    public static final UniqueKey<UserModifyMessageRecord> USER_MODIFY_MESSAGE_PK = Internal.createUniqueKey(UserModifyMessage.USER_MODIFY_MESSAGE, DSL.name("user_modify_message_pk"), new TableField[] { UserModifyMessage.USER_MODIFY_MESSAGE.ID }, true);
}
